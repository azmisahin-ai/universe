# Base stage for Alpine Linux
ARG BASE_IMAGE="alpine:latest"

# Use the base image as the starting point
FROM $BASE_IMAGE AS base

# Metadata indicating an image maintainer.
LABEL maintainer.email="azmisahin@outlook.com"

# Development stage
FROM base AS development
# Switch to work environment
WORKDIR $PROJECT_FOLDER

# copy project file to container file system
COPY . .

ARG DEVELOPMENT_PACKAGES
RUN if [ -n "$DEVELOPMENT_PACKAGES" ]; then \
    apk update && \
    apk add --no-cache $DEVELOPMENT_PACKAGES; \
    else \
    echo "No development packages specified."; \
    exit 1; \
    fi

# Test stage
FROM base AS test
# Get argument
ARG PROJECT_FOLDER
# Switch to work environment
WORKDIR $PROJECT_FOLDER

# copy project file to container file system
COPY . .

ARG TEST_PACKAGES
RUN if [ -n "$TEST_PACKAGES" ]; then \
    apk update && \
    apk add --no-cache $TEST_PACKAGES; \
    else \
    echo "No test packages specified."; \
    exit 1; \
    fi

# Builder stage
FROM base AS builder
# Get argument
ARG PROJECT_FOLDER
# Switch to work environment
WORKDIR $PROJECT_FOLDER

# copy project file to container file system
COPY . .

ARG BUILD_PACKAGES

# Install build packages for both x32 and x64
RUN if [ -n "$BUILD_PACKAGES" ]; then \
    # Install packages
    apk update && \
    apk add --no-cache $BUILD_PACKAGES && \
    # Build x32
    mkdir -p $PROJECT_FOLDER/build/release/x32 && \
    nasm -F dwarf -g -f elf32 -o $PROJECT_FOLDER/build/release/x32/universe.o -DBITS_32 $PROJECT_FOLDER/src/universe.asm && \
    ld -m elf_i386 -o $PROJECT_FOLDER/build/release/x32/universe $PROJECT_FOLDER/build/release/x32/universe.o && \
    # Build x64
    mkdir -p $PROJECT_FOLDER/build/release/x64 && \
    nasm -F dwarf -g -f elf64 -o $PROJECT_FOLDER/build/release/x64/universe.o -DBITS_64 $PROJECT_FOLDER/src/universe.asm && \
    ld -m elf_x86_64 -o $PROJECT_FOLDER/build/release/x64/universe $PROJECT_FOLDER/build/release/x64/universe.o; \
    else \
    echo "No build packages specified."; \
    exit 1; \
    fi


# Final production stage with minimal image
FROM scratch AS production
# Get argument
ARG PROJECT_FOLDER
# copy project file from builder to container file system
COPY --from=builder $PROJECT_FOLDER/build/release/x64/universe /
