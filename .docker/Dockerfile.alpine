# Base stage for Alpine Linux
ARG BASE_IMAGE="alpine:latest"

# Use the base image as the starting point
FROM $BASE_IMAGE AS base

# Metadata indicating an image maintainer
LABEL maintainer.email="azmisahin@outlook.com"

# Default Arguments
ARG PROJECT_FOLDER=/workspace/template
ARG HOST_IP=0.0.0.0
ARG PORT=9001
ARG PLATFORM=linux
ARG BIT=32
ARG ARCH="${PLATFORM}_${BIT}"

# Expose port
EXPOSE $PORT

# Development stage
FROM base AS development

# Switch to work environment
WORKDIR $PROJECT_FOLDER

# copy project file to container file system
COPY . .

ARG DEVELOPMENT_PACKAGES
RUN if [ -n "$DEVELOPMENT_PACKAGES" ]; then \
    apk update && \
    apk add --no-cache $DEVELOPMENT_PACKAGES; \
    else \
    echo "No development packages specified."; \
    exit 1; \
    fi

# Test stage
FROM base AS test
WORKDIR $PROJECT_FOLDER
COPY . .
ARG TEST_PACKAGES
RUN if [ -n "$TEST_PACKAGES" ]; then \
    apk update && \
    apk add --no-cache $TEST_PACKAGES; \
    else \
    echo "No test packages specified."; \
    exit 1; \
    fi

# Builder stage
FROM base AS builder
WORKDIR $PROJECT_FOLDER
COPY . .
ARG BUILD_PACKAGES
RUN if [ -n "$BUILD_PACKAGES" ]; then \
    apk update && \
    apk add --no-cache $BUILD_PACKAGES; \
    else \
    echo "No build packages specified."; \
    exit 1; \
    fi

# Determine CPU architecture and build
RUN if [ "$ARCH" = "linux_64" ]; then \
    mkdir -p $PROJECT_FOLDER/build/release/$ARCH && \
    nasm -F dwarf -g -f elf64 -o $PROJECT_FOLDER/build/release/$ARCH/universe.o -D$ARCH $PROJECT_FOLDER/src/universe.asm && \
    ld -m elf_x86_64 -o $PROJECT_FOLDER/build/release/$ARCH/universe $PROJECT_FOLDER/build/release/$ARCH/universe.o; \
    elif [ "$ARCH" = "linux_32" ]; then \
    mkdir -p $PROJECT_FOLDER/build/release/$ARCH && \
    nasm -F dwarf -g -f elf32 -o $PROJECT_FOLDER/build/release/$ARCH/universe.o -D$ARCH $PROJECT_FOLDER/src/universe.asm && \
    ld -m elf_i386 -o $PROJECT_FOLDER/build/release/$ARCH/universe $PROJECT_FOLDER/build/release/$ARCH/universe.o; \
    elif [ "$ARCH" = "win_64" ]; then \
    mkdir -p $PROJECT_FOLDER/build/release/$ARCH && \
    nasm -f win64 -o $PROJECT_FOLDER/build/release/$ARCH/universe.obj -D$ARCH $PROJECT_FOLDER/src/universe.asm && \
    i686-w64-mingw32-ld -o $PROJECT_FOLDER/build/release/$ARCH/universe.exe $PROJECT_FOLDER/build/release/$ARCH/universe.obj; \
    elif [ "$ARCH" = "win_32" ]; then \
    mkdir -p $PROJECT_FOLDER/build/release/$ARCH && \
    nasm -f win32 -o $PROJECT_FOLDER/build/release/$ARCH/universe.obj -D$ARCH $PROJECT_FOLDER/src/universe.asm && \
    i686-w64-mingw32-ld -o $PROJECT_FOLDER/build/release/$ARCH/universe.exe $PROJECT_FOLDER/build/release/$ARCH/universe.obj; \
    else \
    echo "Unsupported architecture: $ARCH"; \
    exit 1; \
    fi

# Final production stage with minimal image
FROM scratch AS production
# Default Arguments
ARG PROJECT_FOLDER=/workspace/template
ARG HOST_IP=0.0.0.0
ARG PORT=8080
ARG PLATFORM=linux
ARG BIT=32
ARG ARCH="${PLATFORM}_${BIT}"
WORKDIR /
COPY --from=builder $PROJECT_FOLDER/build/release/$ARCH/universe /
EXPOSE $PORT
