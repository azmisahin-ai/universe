# Base stage for Debain Linux
ARG BASE_IMAGE="debian:stable"

# Use the base image as the starting point
FROM $BASE_IMAGE AS base

# Metadata indicating an image maintainer.
LABEL maintainer.email="azmisahin@outlook.com"

# Default Arguments
ARG PROJECT_FOLDER=/workspace/template
ARG HOST_IP=0.0.0.0
ARG PORT=9001
ARG BIT=x32

# Expose port
EXPOSE $PORT

# Development stage
FROM base AS development

# Switch to work environment
WORKDIR $PROJECT_FOLDER

# copy project file to container file system
COPY . .

ARG DEVELOPMENT_PACKAGES
RUN if [ -n "$DEVELOPMENT_PACKAGES" ]; then \
    apt-get update && \
    apt-get install -y --no-install-recommends $DEVELOPMENT_PACKAGES; \
    else \
    echo "No development packages specified."; \
    exit 1; \
    fi

# Test stage
FROM base AS test
WORKDIR $PROJECT_FOLDER
COPY . .
ARG TEST_PACKAGES
RUN if [ -n "$TEST_PACKAGES" ]; then \
    apt-get update && \
    apt-get install -y --no-install-recommends $TEST_PACKAGES; \
    else \
    echo "No test packages specified."; \
    exit 1; \
    fi

# Builder stage
FROM base AS builder
WORKDIR $PROJECT_FOLDER
COPY . .
ARG BUILD_PACKAGES
RUN if [ -n "$BUILD_PACKAGES" ]; then \
    apt-get update && \
    apt-get install -y --no-install-recommends $BUILD_PACKAGES; \
    else \
    echo "No build packages specified."; \
    exit 1; \
    fi

# Determine CPU architecture and build
RUN ARCH=$BIT \
    && if [ "$ARCH" = "x64" ]; then \
    mkdir -p $PROJECT_FOLDER/build/release/x64 && \
    nasm -F dwarf -g -f elf64 -o $PROJECT_FOLDER/build/release/x64/universe.o -DBITS_64 $PROJECT_FOLDER/src/universe.asm && \
    ld -m elf_x86_64 -o $PROJECT_FOLDER/build/release/x64/universe $PROJECT_FOLDER/build/release/x64/universe.o; \
    elif [ "$ARCH" = "x32" ]; then \
    mkdir -p $PROJECT_FOLDER/build/release/x32 && \
    nasm -F dwarf -g -f elf32 -o $PROJECT_FOLDER/build/release/x32/universe.o -DBITS_32 $PROJECT_FOLDER/src/universe.asm && \
    ld -m elf_i386 -o $PROJECT_FOLDER/build/release/x32/universe $PROJECT_FOLDER/build/release/x32/universe.o; \
    else \
    echo "Unsupported architecture: $ARCH"; \
    exit 1; \
    fi

# Final production stage with minimal image
FROM scratch AS production
# Default Arguments
ARG PROJECT_FOLDER=/workspace/template
ARG HOST_IP=0.0.0.0
ARG PORT=9001
ARG BIT=x32

WORKDIR /
COPY --from=builder $PROJECT_FOLDER/build/release/$BIT/universe /
EXPOSE $PORT
